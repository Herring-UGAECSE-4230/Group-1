Breakpoint 1, _start () at FuncStack4_ex6_19.s:9
9	_start: ldr  	r0, =0x125	@ r0 = 0x125
(gdb) s
10		ldr  	r1, =0x144	@ r1 = 0x144
(gdb) s
11		mov  	r2, #0x56	@ r2 = 0x56
(gdb) 
12		bl	myFunc		@ call a subroutine
(gdb) 
myFunc () at FuncStack4_ex6_19.s:21
21		stmdb   r13!, {r0, r1, r2}
(gdb) 
24		mov  	r0, #0	 	@ r0=0
(gdb) 
25		mov  	r1, #0	 	@ r1=0
(gdb) 
26		mov  	r2, #0	 	@ r2=0
(gdb) 
29		ldmia   r13!, {r0, r1, r2}
(gdb) 
myFunc () at FuncStack4_ex6_19.s:31
31		bx	lr 		@ return to caller
(gdb) 
_start () at FuncStack4_ex6_19.s:13
13		add	r3, r0, r1	@ r3 = r0 + r1 = 0x125 + 0x144 = 0x269
(gdb) 
14		add	r3, r3, r2	@ r3 = r3 + r2 = 0x269 + 0x56 = 0x2bf
(gdb) 
15		mov	r7, #1
(gdb) 
16		svc	0
(gdb) i r
r0             0x125               293
r1             0x144               324
r2             0x56                86
r3             0x2bf               703
r4             0x0                 0
r5             0x0                 0
r6             0x0                 0
r7             0x1                 1
r8             0x0                 0
r9             0x0                 0
r10            0x0                 0
r11            0x0                 0
r12            0x0                 0
sp             0xfffef2a0          0xfffef2a0
lr             0x10064             65636
pc             0x10070             0x10070 <_start+28>
cpsr           0x10                16
fpscr          0x0                 0
(gdb) 

        .text
        .global _start
_start: ldr     r0, =0x125      @ r0 = 0x125
        ldr     r1, =0x144      @ r1 = 0x144
        mov     r2, #0x56       @ r2 = 0x56
        bl      myFunc          @ call a subroutine
        add     r3, r0, r1      @ r3 = r0 + r1 = 0x125 + 0x144 = 0x269
        add     r3, r3, r2      @ r3 = r3 + r2 = 0x269 + 0x56 = 0x2bf
        mov     r7, #1
        svc     0
        @ ---------------------------

myFunc:
        @ --------save r0, r1, and r2 on stack before they are used by a loop   
        push    {r0, r1, r2}

        @ --------r0, r1, and r2 are changed
        mov     r0, #0          @ r0=0
        mov     r1, #0          @ r1=0
        mov     r2, #0          @ r2=0

        @ ---------restore the original registers contents from stack
        pop     {r0, r1, r2}

        bx      lr              @ return to caller


Breakpoint 1, _start () at FuncStack4_ex6_19.s:9
warning: Source file is more recent than executable.
9	_start: ldr  	r0, =0x125	@ r0 = 0x125
(gdb) s
10		ldr  	r1, =0x144	@ r1 = 0x144
(gdb) s
11		mov  	r2, #0x56	@ r2 = 0x56
(gdb) s
12		bl	myFunc		@ call a subroutine
(gdb) s
myFunc () at FuncStack4_ex6_19.s:21
21		push	{r0, r1, r2}
(gdb) s
24		mov  	r0, #0	 	@ r0=0
(gdb) s
25		mov  	r1, #0	 	@ r1=0
(gdb) s
26		mov  	r2, #0	 	@ r2=0
(gdb) s
29		pop	{r0, r1, r2}
(gdb) s
myFunc () at FuncStack4_ex6_19.s:31
31		bx	lr 		@ return to caller
(gdb) s
_start () at FuncStack4_ex6_19.s:13
13		add	r3, r0, r1	@ r3 = r0 + r1 = 0x125 + 0x144 = 0x269
(gdb) s
14		add	r3, r3, r2	@ r3 = r3 + r2 = 0x269 + 0x56 = 0x2bf
(gdb) s
15		mov	r7, #1
(gdb) s
16		svc	0
(gdb) i r
r0             0x125               293
r1             0x144               324
r2             0x56                86
r3             0x2bf               703
r4             0x0                 0
r5             0x0                 0
r6             0x0                 0
r7             0x1                 1
r8             0x0                 0
r9             0x0                 0
r10            0x0                 0
r11            0x0                 0
r12            0x0                 0
sp             0xfffef2a0          0xfffef2a0
lr             0x10064             65636
pc             0x10070             0x10070 <_start+28>
cpsr           0x10                16
fpscr          0x0                 0
(gdb) 
